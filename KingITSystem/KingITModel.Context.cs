//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KingITSystem
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    
    public partial class KingITEntities : DbContext
    {
        public KingITEntities()
            : base("name=KingITEntities")
        {
        }

        private static KingITEntities _context;

        public static KingITEntities GetContext()
        {
            if (_context == null)
            {
                _context = new KingITEntities();
            }
            return _context;
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cities> Cities { get; set; }
        public virtual DbSet<Malls> Malls { get; set; }
        public virtual DbSet<MallStatuses> MallStatuses { get; set; }
        public virtual DbSet<Pavilions> Pavilions { get; set; }
        public virtual DbSet<PavilionsLease> PavilionsLease { get; set; }
        public virtual DbSet<PavilionStatuses> PavilionStatuses { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<Users> Users { get; set; }
    
        public virtual int RentOrReservePavilion(string pavilionId, Nullable<System.DateTime> leaseStart, Nullable<System.DateTime> leaseEnd, Nullable<int> statusId)
        {
            var pavilionIdParameter = pavilionId != null ?
                new ObjectParameter("PavilionId", pavilionId) :
                new ObjectParameter("PavilionId", typeof(string));
    
            var leaseStartParameter = leaseStart.HasValue ?
                new ObjectParameter("LeaseStart", leaseStart) :
                new ObjectParameter("LeaseStart", typeof(System.DateTime));
    
            var leaseEndParameter = leaseEnd.HasValue ?
                new ObjectParameter("LeaseEnd", leaseEnd) :
                new ObjectParameter("LeaseEnd", typeof(System.DateTime));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RentOrReservePavilion", pavilionIdParameter, leaseStartParameter, leaseEndParameter, statusIdParameter);
        }
    
        public virtual int RescheduleLease()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RescheduleLease");
        }
    }
}
